// Code generated by MockGen. DO NOT EDIT.
// Source: row.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backend "github.com/goropikari/mysqlite2/backend"
	core "github.com/goropikari/mysqlite2/core"
)

// MockWhereExpr is a mock of WhereExpr interface.
type MockWhereExpr struct {
	ctrl     *gomock.Controller
	recorder *MockWhereExprMockRecorder
}

// MockWhereExprMockRecorder is the mock recorder for MockWhereExpr.
type MockWhereExprMockRecorder struct {
	mock *MockWhereExpr
}

// NewMockWhereExpr creates a new mock instance.
func NewMockWhereExpr(ctrl *gomock.Controller) *MockWhereExpr {
	mock := &MockWhereExpr{ctrl: ctrl}
	mock.recorder = &MockWhereExprMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhereExpr) EXPECT() *MockWhereExprMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockWhereExpr) Eval() func(backend.Row) core.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval")
	ret0, _ := ret[0].(func(backend.Row) core.Value)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockWhereExprMockRecorder) Eval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockWhereExpr)(nil).Eval))
}
