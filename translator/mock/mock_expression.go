// Code generated by MockGen. DO NOT EDIT.
// Source: expression.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backend "github.com/goropikari/psqlittle/backend"
	core "github.com/goropikari/psqlittle/core"
)

// MockExpressionNode is a mock of ExpressionNode interface.
type MockExpressionNode struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionNodeMockRecorder
}

// MockExpressionNodeMockRecorder is the mock recorder for MockExpressionNode.
type MockExpressionNodeMockRecorder struct {
	mock *MockExpressionNode
}

// NewMockExpressionNode creates a new mock instance.
func NewMockExpressionNode(ctrl *gomock.Controller) *MockExpressionNode {
	mock := &MockExpressionNode{ctrl: ctrl}
	mock.recorder = &MockExpressionNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpressionNode) EXPECT() *MockExpressionNodeMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockExpressionNode) Eval() func(backend.Row) (core.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval")
	ret0, _ := ret[0].(func(backend.Row) (core.Value, error))
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockExpressionNodeMockRecorder) Eval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockExpressionNode)(nil).Eval))
}
