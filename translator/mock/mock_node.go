// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/goropikari/mysqlite2/core"
	translator "github.com/goropikari/mysqlite2/translator"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetTable mocks base method.
func (m *MockDB) GetTable(arg0 string) translator.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", arg0)
	ret0, _ := ret[0].(translator.Table)
	return ret0
}

// GetTable indicates an expected call of GetTable.
func (mr *MockDBMockRecorder) GetTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockDB)(nil).GetTable), arg0)
}

// Resister mocks base method.
func (m *MockDB) Resister(arg0 translator.Table) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resister", arg0)
}

// Resister indicates an expected call of Resister.
func (mr *MockDBMockRecorder) Resister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resister", reflect.TypeOf((*MockDB)(nil).Resister), arg0)
}

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockTable) Copy() translator.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(translator.Table)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockTableMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockTable)(nil).Copy))
}

// GetRows mocks base method.
func (m *MockTable) GetRows() []translator.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRows")
	ret0, _ := ret[0].([]translator.Row)
	return ret0
}

// GetRows indicates an expected call of GetRows.
func (mr *MockTableMockRecorder) GetRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRows", reflect.TypeOf((*MockTable)(nil).GetRows))
}

// SetRows mocks base method.
func (m *MockTable) SetRows(arg0 []translator.Row) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRows", arg0)
}

// SetRows indicates an expected call of SetRows.
func (mr *MockTableMockRecorder) SetRows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRows", reflect.TypeOf((*MockTable)(nil).SetRows), arg0)
}

// MockRow is a mock of Row interface.
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow.
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance.
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// GetValueByColName mocks base method.
func (m *MockRow) GetValueByColName(arg0 core.ColName) core.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueByColName", arg0)
	ret0, _ := ret[0].(core.Value)
	return ret0
}

// GetValueByColName indicates an expected call of GetValueByColName.
func (mr *MockRowMockRecorder) GetValueByColName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByColName", reflect.TypeOf((*MockRow)(nil).GetValueByColName), arg0)
}

// MockRelationalAlgebraNode is a mock of RelationalAlgebraNode interface.
type MockRelationalAlgebraNode struct {
	ctrl     *gomock.Controller
	recorder *MockRelationalAlgebraNodeMockRecorder
}

// MockRelationalAlgebraNodeMockRecorder is the mock recorder for MockRelationalAlgebraNode.
type MockRelationalAlgebraNodeMockRecorder struct {
	mock *MockRelationalAlgebraNode
}

// NewMockRelationalAlgebraNode creates a new mock instance.
func NewMockRelationalAlgebraNode(ctrl *gomock.Controller) *MockRelationalAlgebraNode {
	mock := &MockRelationalAlgebraNode{ctrl: ctrl}
	mock.recorder = &MockRelationalAlgebraNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationalAlgebraNode) EXPECT() *MockRelationalAlgebraNodeMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockRelationalAlgebraNode) Eval() translator.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval")
	ret0, _ := ret[0].(translator.Table)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockRelationalAlgebraNodeMockRecorder) Eval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockRelationalAlgebraNode)(nil).Eval))
}

// MockWhereExpr is a mock of WhereExpr interface.
type MockWhereExpr struct {
	ctrl     *gomock.Controller
	recorder *MockWhereExprMockRecorder
}

// MockWhereExprMockRecorder is the mock recorder for MockWhereExpr.
type MockWhereExprMockRecorder struct {
	mock *MockWhereExpr
}

// NewMockWhereExpr creates a new mock instance.
func NewMockWhereExpr(ctrl *gomock.Controller) *MockWhereExpr {
	mock := &MockWhereExpr{ctrl: ctrl}
	mock.recorder = &MockWhereExprMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhereExpr) EXPECT() *MockWhereExprMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockWhereExpr) Eval() func(translator.Row) core.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval")
	ret0, _ := ret[0].(func(translator.Row) core.Value)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockWhereExprMockRecorder) Eval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockWhereExpr)(nil).Eval))
}
