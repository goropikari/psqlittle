// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backend "github.com/goropikari/mysqlite2/backend"
)

// MockRelationalAlgebraNode is a mock of RelationalAlgebraNode interface.
type MockRelationalAlgebraNode struct {
	ctrl     *gomock.Controller
	recorder *MockRelationalAlgebraNodeMockRecorder
}

// MockRelationalAlgebraNodeMockRecorder is the mock recorder for MockRelationalAlgebraNode.
type MockRelationalAlgebraNodeMockRecorder struct {
	mock *MockRelationalAlgebraNode
}

// NewMockRelationalAlgebraNode creates a new mock instance.
func NewMockRelationalAlgebraNode(ctrl *gomock.Controller) *MockRelationalAlgebraNode {
	mock := &MockRelationalAlgebraNode{ctrl: ctrl}
	mock.recorder = &MockRelationalAlgebraNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationalAlgebraNode) EXPECT() *MockRelationalAlgebraNodeMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockRelationalAlgebraNode) Eval(arg0 backend.DB) (backend.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", arg0)
	ret0, _ := ret[0].(backend.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eval indicates an expected call of Eval.
func (mr *MockRelationalAlgebraNodeMockRecorder) Eval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockRelationalAlgebraNode)(nil).Eval), arg0)
}
